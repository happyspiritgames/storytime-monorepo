/**
 * StoryTime Reader API
 * Interface to the StoryTime Reader service, supporting consumers of stories.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@happyspiritgames.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ErrorResponse', 'model/Pong', 'model/Scene', 'model/SearchResults', 'model/StorySummary'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ErrorResponse'), require('../model/Pong'), require('../model/Scene'), require('../model/SearchResults'), require('../model/StorySummary'));
  } else {
    // Browser globals (root is window)
    if (!root.StoryTimeReaderApi) {
      root.StoryTimeReaderApi = {};
    }
    root.StoryTimeReaderApi.DevelopersApi = factory(root.StoryTimeReaderApi.ApiClient, root.StoryTimeReaderApi.ErrorResponse, root.StoryTimeReaderApi.Pong, root.StoryTimeReaderApi.Scene, root.StoryTimeReaderApi.SearchResults, root.StoryTimeReaderApi.StorySummary);
  }
}(this, function(ApiClient, ErrorResponse, Pong, Scene, SearchResults, StorySummary) {
  'use strict';

  /**
   * Developers service.
   * @module api/DevelopersApi
   * @version 1.0.0
   */

  /**
   * Constructs a new DevelopersApi. 
   * @alias module:api/DevelopersApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getPublishedStory operation.
     * @callback module:api/DevelopersApi~getPublishedStoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StorySummary} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get published story for the given storyKey
     * @param {String} storyKey unique identifier of the story to retrieve
     * @param {module:api/DevelopersApi~getPublishedStoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StorySummary}
     */
    this.getPublishedStory = function(storyKey, callback) {
      var postBody = null;

      // verify the required parameter 'storyKey' is set
      if (storyKey == undefined || storyKey == null) {
        throw new Error("Missing the required parameter 'storyKey' when calling getPublishedStory");
      }


      var pathParams = {
        'storyKey': storyKey
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = StorySummary;

      return this.apiClient.callApi(
        '/stories/{storyKey}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getStoryScene operation.
     * @callback module:api/DevelopersApi~getStorySceneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Scene} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a scene.
     * @param {String} storyKey story key
     * @param {String} sceneKey scene key
     * @param {module:api/DevelopersApi~getStorySceneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Scene}
     */
    this.getStoryScene = function(storyKey, sceneKey, callback) {
      var postBody = null;

      // verify the required parameter 'storyKey' is set
      if (storyKey == undefined || storyKey == null) {
        throw new Error("Missing the required parameter 'storyKey' when calling getStoryScene");
      }

      // verify the required parameter 'sceneKey' is set
      if (sceneKey == undefined || sceneKey == null) {
        throw new Error("Missing the required parameter 'sceneKey' when calling getStoryScene");
      }


      var pathParams = {
        'storyKey': storyKey,
        'sceneKey': sceneKey
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = Scene;

      return this.apiClient.callApi(
        '/stories/{storyKey}/scenes/{sceneKey}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the ping operation.
     * @callback module:api/DevelopersApi~pingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Pong} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * pings the service
     * Check for signs of life.
     * @param {module:api/DevelopersApi~pingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Pong}
     */
    this.ping = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Pong;

      return this.apiClient.callApi(
        '/ping', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchInventory operation.
     * @callback module:api/DevelopersApi~searchInventoryCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SearchResults>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * searches catalog of published stories or gets a list of recommendations
     * Finds a list of stories based on search criteria, or a short list of recommendations by default. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.match --NOT IMPLEMENTED-- an optional search string for looking up stories. 
     * @param {module:api/DevelopersApi~searchInventoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SearchResults>}
     */
    this.searchInventory = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'match': opts['match']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [SearchResults];

      return this.apiClient.callApi(
        '/stories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
